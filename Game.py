import timeimport random#Class variablesgalaxy = []available = []users =[]passwords = []#Not stored variablea = 0f = 100#Subclasses of gameclass planet:    def __init__(self, size, planetType, s, p):        self.size = size        self.planetType = planetType        self.coordinates = [s, p]        self.user = ""        #Resources        self.metal = [200,0]        self.no_metal = [200,0]        self.gas = [200,0]        #Limits        self.metal_limit = 1000        self.no_metal_limit = 1000        self.gas_limit = 1000        #Buildings        self.metal_mine = building(0, 100, 100)        self.no_metal_mine = building(0, 100, 100)        self.gas_refinery = building(0, 100, 100)        self.metal_repository = building(0, 500, 500)        self.no_metal_repository = building(0, 500, 500)        self.gas_tank = building(0, 500, 500)    def __repr__(self):    	return "(" + str(self.coordinates) + ", " + str(self.size) + ", " + str(self.planetType) + ")"    def reclaim(self, user):        t = int(time.time())        self.user = user        self.metal[1] = t        self.no_metal[1] = t        self.gas[1] = tclass building:    def __init__(self, level, metalCost, nonmetalCost):        self.level = level        self.metal_cost = metalCost        self.no_metal_cost = nonmetalCost    def upgrade(self):        self.level += 1        self.metal_cost *= 2        self.no_metal_cost *= 2class research:    def __init__(self, name, level, metalCost, nonmetalCost, gasCost):        self.name = name        self.level = level        self.metal_cost = metalCost        self.no_metal_cost = nonmetalCost        self.gas_cost = gasCostclass ship:    def __init__(self, shipname, shield, speed, metalCost, nonmetalCost, gasCost):        self.shipname = shipname        self.power = power        self.speed = speed        self.metal_cost = metalCost        self.no_metal_cost = nonmetalCost        self.gas_cost = gasCostclass mission:    def __init__(self, missionType):        self.missionType = missionTypeclass user:    def __init__(self, username, password):        self.username = username        self.password = password        self.points = 0        self.planets = []    def reclaim(self, n):    	self.planets.append(n)def generate_universe(ss):    for s in range(ss):        system = []        for p in range(15):            if random.randrange(0, 2) == 1:                pl = planet(random.randrange(100, 120), random.randrange(4), s, p)                system.append(pl)                available.append([s, p])            else:                system.append(0)        galaxy.append(system)def save():    print("pending")def regenerate_universe(g, u , p):    l = list(map(int, input().rstrip().split()))def rand_assign(user):    pc = random.choice(available)    available.remove(pc)    galaxy[pc[0]][pc[1]].reclaim(user)    user.reclaim(galaxy[pc[0]][pc[1]])def build(planet, building):    global f    t = int(time.time())    balance = int((t - planet.metal[1])*planet.metal_mine.level*f) + planet.metal[0]    if balance >= planet.metal_limit:        balance =  planet.metal_limit    if building.metal_cost <= balance:        balance2 = int((t - planet.no_metal[1])*planet.no_metal_mine.level*f) + planet.no_metal[0]        if balance2 >= planet.no_metal_limit:            balance2 =  planet.no_metal_limit        if building.no_metal_cost <= balance2:            planet.metal[0] = balance - building.metal_cost            planet.metal[1] = t            planet.no_metal[0] = balance2 - building.no_metal_cost            planet.no_metal[1] = t            building.upgrade()            print("Upgrede succesful")        else:            print("Not enough no_metals")    else:        print("Not enough metal")def show(planet):    global f    t = int(time.time())    balance = int((t - planet.metal[1])*planet.metal_mine.level*f) + planet.metal[0]    if balance >= planet.metal_limit:        balance =  planet.metal_limit    balance2 = int((t - planet.no_metal[1])*planet.no_metal_mine.level*f) + planet.no_metal[0]    if balance2 >= planet.no_metal_limit:        balance2 =  planet.no_metal_limit    balance3 = int((t - planet.gas[1])*planet.gas_refinery.level*f) + planet.gas[0]    if balance3 >= planet.gas_limit:        balance3 =  planet.gas_limit    print("Metal = " + str(balance) + " | No metal = " + str(balance2) + " | Gas = " + str(balance3))def start(userx):    a = 0    user = userx    p = user.planets[0]    while True:        print("\nWhat do u wanna do?\n" +              "[1] Build\n" +              "[2] Research\n" +              "[3] Explore\n" +              "[4] Ship\n" +              "[5] Inform\n" +              "[6] Switch\n" +              "[7] Logout\n")        a = int(input())        if a == 1:            print("What do u wanna build?\n" +                  "[1] Buildings\n" +                  "[2] Shipping\n")            a = int(input())            if a == 1:                print("What do u wanna build?\n" +                      "[1] Metal mine\n" +                      "[2] No metal mine\n" +                      "[3] Gas Refinery\n")                a = int(input())                if a == 1:                    b = p.metal_mine                elif a == 2:                    b = p.no_metal_mine                elif a == 3:                    b = p.gas_refinery                else:                    print("Wrong answer")                    continue                build(p, b)            elif a == 2:                print("Coming soon")            else:                print("Wrong answer")        elif a == 5:            show(p)        else:            break#Testing of gamegenerate_universe(100)u = user("reluro", "kk12345")rand_assign(u)start(u)#Game beginning##try:##    uf = open("users.game", "r+")##    gf = open("game.game", "r+")##    pf = open("password.game", "r+")##except:##    print("Data not found...\n" +##          "Your username will be created in a new game file.")##    uf = open("users.game", "w+")##    gf = open("game.game", "w+")##    pf = open("password.game", "w+")##    a = 3##while True:##    if a == 0:##        print("What do u wanna do?\n" +##              "[0] Login\n" +##              "[1] Register\n" +##              "[2] Exit\n")##        try:##            a = int(input())##        except:##            a = -1##    if a == 0 or  a == 1 or a == 3:##        print("Enter username:")##        u = input()##        if u == "" or u == "-":##            print("Invalid user. Try again")##            a = 0##            continue##        print("Enter password:")##        p = input()##        if a != 3:##            ufd = uf.read()##            gfd = gf.read()##            pfd = pf.read()##            if a == 0:##                if ufd.find(u) == -1 or pfd.find(p) == -1:##                    print("Username or password error")##                    continue##            else:##                if ufd.find(u) != -1:##                    print("Username already exists")##                    continue##            regenerate_universe(gfd, ufd, pfd)##        else:##            generate_universe(100)##            start()##    elif a == 2:##        print("Thanks for playing")##        break##    else:##        print("Unknown answer\n")